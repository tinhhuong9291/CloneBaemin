datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id              String    @id @default(uuid()) @db.Uuid
  firstName       String?   @db.VarChar(50)
  lastName        String?   @db.VarChar(50)
  email           String    @unique @db.VarChar(255)
  password        String    @db.VarChar(255)
  role            String?   @db.VarChar(10)
  phone           String?   @db.VarChar(20)
  gender          String?   @db.VarChar(10)
  avatar          String?   @db.Text
  coverPhoto      String?   @db.Text
  createdAt       DateTime? @default(now())
  updatedAt       DateTime? @updatedAt
  passChangedAt   DateTime?
  status          Boolean?  @default(false)

  addresses       Address[]
  carts           Cart[]
  reviews         Review[]
  banners         Banner[]
  refreshTokens   RefreshToken[]
  sessions        UserSession[]
  providers       UserProvider[]
  favoriteFoods   FavoriteFood[]
}

model Address {
  addressId     Int       @id @default(autoincrement())
  userId        String    @db.Uuid
  addressLine1  String    @db.VarChar(255)
  addressLine2  String?   @db.VarChar(255)
  city          String    @db.VarChar(100)
  postalCode    String    @db.VarChar(20)
  addressType   String    @db.VarChar(50)
  latitude      Decimal?  @db.Decimal(9, 6)
  longitude     Decimal?  @db.Decimal(9, 6)
  isRemoved     Boolean?  @default(false)
  createdAt     DateTime? @default(now())
  updatedAt     DateTime? @updatedAt

  User          User      @relation(fields: [userId], references: [id])
}

model Cart {
  userId        String    @db.Uuid
  foodId        Int
  quantity      Int
  createdAt     DateTime? @default(now())
  updatedAt     DateTime? @updatedAt

  User          User      @relation(fields: [userId], references: [id])

  @@id([userId, foodId])
}

model Review {
  reviewId      Int       @id @default(autoincrement())
  userId        String    @db.Uuid
  foodId        Int
  rating        Int
  comment       String?   @db.Text
  createdAt     DateTime? @default(now())
  updatedAt     DateTime? @updatedAt

  User          User      @relation(fields: [userId], references: [id])

  @@unique([userId, foodId])
}

model Banner {
  bannerId      Int       @id @default(autoincrement())
  userId        String    @db.Uuid
  name          String    @db.VarChar(50)
  url           String    @db.Text
  link          String?   @db.Text
  description   String?   @db.Text
  isRemoved     Boolean?  @default(false)
  createdAt     DateTime? @default(now())
  updatedAt     DateTime? @updatedAt

  User          User      @relation(fields: [userId], references: [id])
}

model RefreshToken {
  tokenId       Int       @id @default(autoincrement())
  userId        String    @db.Uuid
  token         String    @db.Text
  deviceInfo    String?   @db.Text
  ipAddress     String?   @db.VarChar(45)
  userAgent     String?   @db.Text
  createdAt     DateTime? @default(now())
  updatedAt     DateTime? @updatedAt

  User          User      @relation(fields: [userId], references: [id])
}

model UserSession {
  sessionId     Int       @id @default(autoincrement())
  userId        String    @db.Uuid
  loginAt       DateTime? @default(now())
  logoutAt      DateTime?
  userAgent     String?   @db.Text
  createdAt     DateTime? @default(now())
  updatedAt     DateTime? @updatedAt

  User          User      @relation(fields: [userId], references: [id])
}

model UserProvider {
  providerId    Int       @id @default(autoincrement())
  userId        String    @db.Uuid
  provider      String    @db.VarChar(50)
  providerEmail String?   @db.VarChar(100)
  providerIdRef String    @db.VarChar(255)
  accessToken   String?   @db.Text
  refreshToken  String?   @db.Text
  expiresAt     DateTime?
  createdAt     DateTime? @default(now())

  User          User      @relation(fields: [userId], references: [id])
}

model FavoriteFood {
  userId        String    @db.Uuid
  foodId        Int
  addedAt       DateTime? @default(now())

  User          User      @relation(fields: [userId], references: [id])

  @@id([userId, foodId])
}
